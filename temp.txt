            {
                SEAL_ALLOCATE_ZERO_GET_RNS_ITER(poly.asPointer(), 4, 2, pool);
                SEAL_ALLOCATE_ZERO_GET_RNS_ITER(result, 4, 2, pool);

                vector<Modulus> mod{ 10, 11 };

                poly[0 * 4 + 0] = 1;
                poly[0 * 4 + 1] = 2;
                poly[0 * 4 + 2] = 3;
                poly[0 * 4 + 3] = 4;
                poly[1 * 4 + 0] = 1;
                poly[1 * 4 + 1] = 2;
                poly[1 * 4 + 2] = 3;
                poly[1 * 4 + 3] = 4;

                negacyclicShiftPolyCoeffmod(poly.asPointer(), 2, 0, mod, result);
                ASSERT_EQ(1ULL, result[0 * 4 + 0]);
                ASSERT_EQ(2ULL, result[0 * 4 + 1]);
                ASSERT_EQ(3ULL, result[0 * 4 + 2]);
                ASSERT_EQ(4ULL, result[0 * 4 + 3]);
                ASSERT_EQ(1ULL, result[1 * 4 + 0]);
                ASSERT_EQ(2ULL, result[1 * 4 + 1]);
                ASSERT_EQ(3ULL, result[1 * 4 + 2]);
                ASSERT_EQ(4ULL, result[1 * 4 + 3]);

                negacyclicShiftPolyCoeffmod(poly.asPointer(), 2, 1, mod, result);
                ASSERT_EQ(6ULL, result[0 * 4 + 0]);
                ASSERT_EQ(1ULL, result[0 * 4 + 1]);
                ASSERT_EQ(2ULL, result[0 * 4 + 2]);
                ASSERT_EQ(3ULL, result[0 * 4 + 3]);
                ASSERT_EQ(7ULL, result[1 * 4 + 0]);
                ASSERT_EQ(1ULL, result[1 * 4 + 1]);
                ASSERT_EQ(2ULL, result[1 * 4 + 2]);
                ASSERT_EQ(3ULL, result[1 * 4 + 3]);

                negacyclicShiftPolyCoeffmod(poly.asPointer(), 2, 2, mod, result);
                ASSERT_EQ(7ULL, result[0 * 4 + 0]);
                ASSERT_EQ(6ULL, result[0 * 4 + 1]);
                ASSERT_EQ(1ULL, result[0 * 4 + 2]);
                ASSERT_EQ(2ULL, result[0 * 4 + 3]);
                ASSERT_EQ(8ULL, result[1 * 4 + 0]);
                ASSERT_EQ(7ULL, result[1 * 4 + 1]);
                ASSERT_EQ(1ULL, result[1 * 4 + 2]);
                ASSERT_EQ(2ULL, result[1 * 4 + 3]);

                negacyclicShiftPolyCoeffmod(poly.asPointer(), 2, 3, mod, result);
                ASSERT_EQ(8ULL, result[0 * 4 + 0]);
                ASSERT_EQ(7ULL, result[0 * 4 + 1]);
                ASSERT_EQ(6ULL, result[0 * 4 + 2]);
                ASSERT_EQ(1ULL, result[0 * 4 + 3]);
                ASSERT_EQ(9ULL, result[1 * 4 + 0]);
                ASSERT_EQ(8ULL, result[1 * 4 + 1]);
                ASSERT_EQ(7ULL, result[1 * 4 + 2]);
                ASSERT_EQ(1ULL, result[1 * 4 + 3]);
            }
            {
                SEAL_ALLOCATE_ZERO_GETPoly_ITER(poly.asPointer(), 2, 4, 2, pool);
                SEAL_ALLOCATE_ZERO_GETPoly_ITER(result, 2, 4, 2, pool);

                vector<Modulus> mod{ 10, 11 };

                poly[0 * 2 * 4 + 0 * 4 + 0] = 1;
                poly[0 * 2 * 4 + 0 * 4 + 1] = 2;
                poly[0 * 2 * 4 + 0 * 4 + 2] = 3;
                poly[0 * 2 * 4 + 0 * 4 + 3] = 4;
                poly[0 * 2 * 4 + 1 * 4 + 0] = 1;
                poly[0 * 2 * 4 + 1 * 4 + 1] = 2;
                poly[0 * 2 * 4 + 1 * 4 + 2] = 3;
                poly[0 * 2 * 4 + 1 * 4 + 3] = 4;

                poly[1 * 2 * 4 + 0 * 4 + 0] = 1;
                poly[1 * 2 * 4 + 0 * 4 + 1] = 2;
                poly[1 * 2 * 4 + 0 * 4 + 2] = 3;
                poly[1 * 2 * 4 + 0 * 4 + 3] = 4;
                poly[1 * 2 * 4 + 1 * 4 + 0] = 1;
                poly[1 * 2 * 4 + 1 * 4 + 1] = 2;
                poly[1 * 2 * 4 + 1 * 4 + 2] = 3;
                poly[1 * 2 * 4 + 1 * 4 + 3] = 4;

                negacyclicShiftPolyCoeffmod(poly.asPointer(), 2, 0, mod, result);
                ASSERT_EQ(1ULL, result[0 * 2 * 4 + 0 * 4 + 0]);
                ASSERT_EQ(2ULL, result[0 * 2 * 4 + 0 * 4 + 1]);
                ASSERT_EQ(3ULL, result[0 * 2 * 4 + 0 * 4 + 2]);
                ASSERT_EQ(4ULL, result[0 * 2 * 4 + 0 * 4 + 3]);
                ASSERT_EQ(1ULL, result[0 * 2 * 4 + 1 * 4 + 0]);
                ASSERT_EQ(2ULL, result[0 * 2 * 4 + 1 * 4 + 1]);
                ASSERT_EQ(3ULL, result[0 * 2 * 4 + 1 * 4 + 2]);
                ASSERT_EQ(4ULL, result[0 * 2 * 4 + 1 * 4 + 3]);

                ASSERT_EQ(1ULL, result[1 * 2 * 4 + 0 * 4 + 0]);
                ASSERT_EQ(2ULL, result[1 * 2 * 4 + 0 * 4 + 1]);
                ASSERT_EQ(3ULL, result[1 * 2 * 4 + 0 * 4 + 2]);
                ASSERT_EQ(4ULL, result[1 * 2 * 4 + 0 * 4 + 3]);
                ASSERT_EQ(1ULL, result[1 * 2 * 4 + 1 * 4 + 0]);
                ASSERT_EQ(2ULL, result[1 * 2 * 4 + 1 * 4 + 1]);
                ASSERT_EQ(3ULL, result[1 * 2 * 4 + 1 * 4 + 2]);
                ASSERT_EQ(4ULL, result[1 * 2 * 4 + 1 * 4 + 3]);

                negacyclicShiftPolyCoeffmod(poly.asPointer(), 2, 1, mod, result);
                ASSERT_EQ(6ULL, result[0 * 2 * 4 + 0 * 4 + 0]);
                ASSERT_EQ(1ULL, result[0 * 2 * 4 + 0 * 4 + 1]);
                ASSERT_EQ(2ULL, result[0 * 2 * 4 + 0 * 4 + 2]);
                ASSERT_EQ(3ULL, result[0 * 2 * 4 + 0 * 4 + 3]);
                ASSERT_EQ(7ULL, result[0 * 2 * 4 + 1 * 4 + 0]);
                ASSERT_EQ(1ULL, result[0 * 2 * 4 + 1 * 4 + 1]);
                ASSERT_EQ(2ULL, result[0 * 2 * 4 + 1 * 4 + 2]);
                ASSERT_EQ(3ULL, result[0 * 2 * 4 + 1 * 4 + 3]);

                ASSERT_EQ(6ULL, result[1 * 2 * 4 + 0 * 4 + 0]);
                ASSERT_EQ(1ULL, result[1 * 2 * 4 + 0 * 4 + 1]);
                ASSERT_EQ(2ULL, result[1 * 2 * 4 + 0 * 4 + 2]);
                ASSERT_EQ(3ULL, result[1 * 2 * 4 + 0 * 4 + 3]);
                ASSERT_EQ(7ULL, result[1 * 2 * 4 + 1 * 4 + 0]);
                ASSERT_EQ(1ULL, result[1 * 2 * 4 + 1 * 4 + 1]);
                ASSERT_EQ(2ULL, result[1 * 2 * 4 + 1 * 4 + 2]);
                ASSERT_EQ(3ULL, result[1 * 2 * 4 + 1 * 4 + 3]);

                negacyclicShiftPolyCoeffmod(poly.asPointer(), 2, 2, mod, result);
                ASSERT_EQ(7ULL, result[0 * 2 * 4 + 0 * 4 + 0]);
                ASSERT_EQ(6ULL, result[0 * 2 * 4 + 0 * 4 + 1]);
                ASSERT_EQ(1ULL, result[0 * 2 * 4 + 0 * 4 + 2]);
                ASSERT_EQ(2ULL, result[0 * 2 * 4 + 0 * 4 + 3]);
                ASSERT_EQ(8ULL, result[0 * 2 * 4 + 1 * 4 + 0]);
                ASSERT_EQ(7ULL, result[0 * 2 * 4 + 1 * 4 + 1]);
                ASSERT_EQ(1ULL, result[0 * 2 * 4 + 1 * 4 + 2]);
                ASSERT_EQ(2ULL, result[0 * 2 * 4 + 1 * 4 + 3]);

                ASSERT_EQ(7ULL, result[1 * 2 * 4 + 0 * 4 + 0]);
                ASSERT_EQ(6ULL, result[1 * 2 * 4 + 0 * 4 + 1]);
                ASSERT_EQ(1ULL, result[1 * 2 * 4 + 0 * 4 + 2]);
                ASSERT_EQ(2ULL, result[1 * 2 * 4 + 0 * 4 + 3]);
                ASSERT_EQ(8ULL, result[1 * 2 * 4 + 1 * 4 + 0]);
                ASSERT_EQ(7ULL, result[1 * 2 * 4 + 1 * 4 + 1]);
                ASSERT_EQ(1ULL, result[1 * 2 * 4 + 1 * 4 + 2]);
                ASSERT_EQ(2ULL, result[1 * 2 * 4 + 1 * 4 + 3]);

                negacyclicShiftPolyCoeffmod(poly.asPointer(), 2, 3, mod, result);
                ASSERT_EQ(8ULL, result[0 * 2 * 4 + 0 * 4 + 0]);
                ASSERT_EQ(7ULL, result[0 * 2 * 4 + 0 * 4 + 1]);
                ASSERT_EQ(6ULL, result[0 * 2 * 4 + 0 * 4 + 2]);
                ASSERT_EQ(1ULL, result[0 * 2 * 4 + 0 * 4 + 3]);
                ASSERT_EQ(9ULL, result[0 * 2 * 4 + 1 * 4 + 0]);
                ASSERT_EQ(8ULL, result[0 * 2 * 4 + 1 * 4 + 1]);
                ASSERT_EQ(7ULL, result[0 * 2 * 4 + 1 * 4 + 2]);
                ASSERT_EQ(1ULL, result[0 * 2 * 4 + 1 * 4 + 3]);

                ASSERT_EQ(8ULL, result[1 * 2 * 4 + 0 * 4 + 0]);
                ASSERT_EQ(7ULL, result[1 * 2 * 4 + 0 * 4 + 1]);
                ASSERT_EQ(6ULL, result[1 * 2 * 4 + 0 * 4 + 2]);
                ASSERT_EQ(1ULL, result[1 * 2 * 4 + 0 * 4 + 3]);
                ASSERT_EQ(9ULL, result[1 * 2 * 4 + 1 * 4 + 0]);
                ASSERT_EQ(8ULL, result[1 * 2 * 4 + 1 * 4 + 1]);
                ASSERT_EQ(7ULL, result[1 * 2 * 4 + 1 * 4 + 2]);
                ASSERT_EQ(1ULL, result[1 * 2 * 4 + 1 * 4 + 3]);
            }